@page "/consulta-materiais"
@using ControleMaterialWeb.Models;
@using ControleMaterialWeb.Services;
@using ControleMaterialWeb.Services.Interfaces;
@inject IMaterialService serviceMaterial;
@inject NavigationManager navigation;
@inject IRecursos recursos

<PageTitle>Consulta de Materiais</PageTitle>


<form>
    <fieldset>
        <legend>Consulta de Materiais</legend>
        <br />
        <div class="card">
            <div class="card-header">
                Filtro por Nome do material
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <input type="text" class="form-control" @bind-value="NomeMaterial" placeholder="digite nome do material para consulta" name="nome_material">
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Consultar</button>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <br />
        <div class="card">
            <div class="card-header">
                Materiais cadastrados
            </div>
            <div class="card-body">
                @if (materiais?.Count() > 0)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Código Material</th>
                                <th>Nome Material</th>
                                <th>Unidade de médida</th>
                                <th>Data Cadastro</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var material in materiais)
                            {
                                <tr>
                                    <td>@material.Id</td>
                                    <td>@material.Nome</td>
                                    <td>@material.UnidadeMedida</td>
                                    <td>@material.DataCadastro?.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-primary" @onclick="(()=>Alterar(material.Id))">Alterar</button>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger" @onclick="(()=>ExcluirMaterial(material.Id))">Excluir</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                
                <Paginacao QuantidadeTotalPaginas="@TotalDePaginas" paginaAtual="@paginaAtual"
                           Raio="2" PaginaSelecionada="@PaginaSelecionada">
                    </Paginacao>
                }
                else if( materiais is null)
                {
                    <h4>Aguardando...</h4>
                }
                else
                {
                    <h4>Nenhum registro encontrado.</h4>
                }
            </div>
        </div>
    </fieldset>
</form>



@code
{
    private IEnumerable<MaterialModel> materiais;
    private int TotalDePaginas;
    private int TotalDeRegistros;
    private int paginaAtual = 1;
    private string NomeMaterial = "";

    protected override async Task OnInitializedAsync()
    {
        await CarregarMateriais();
    }


    private async Task ExcluirMaterial(int id)
    {
        var retorno = await serviceMaterial.ApagarMaterialAsync(id);
        if (retorno.Sucesso)
            recursos.AlertaSucesso("Material Excluido!");
        else
            foreach (var mens in retorno.MensagensDeErros) recursos.AlertaErro(mens);

        await CarregarMateriais();
    }

    private Task Alterar(int id)
    {
        navigation.NavigateTo($"/editar-material/{id}");
        return Task.CompletedTask;
    }

    private async Task CarregarMateriais(int pagina = 1, string nome = "", int quantidadePorPagina = 10)
    {
        var dadosResponse = new ResponseDto<IList<MaterialModel>>();
        if (string.IsNullOrWhiteSpace(nome))
            dadosResponse = await serviceMaterial.RecuperarTodosMateriaisAsync("", quantidadePorPagina, pagina);
        else
            dadosResponse = await serviceMaterial.RecuperarTodosMateriaisAsync(nome, quantidadePorPagina, pagina);
        materiais = dadosResponse?.Result;
        TotalDePaginas = dadosResponse.TotalDePaginas;
        TotalDeRegistros = dadosResponse.TotalDeRegistros;
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregarMateriais(pagina);
    }

    private async Task Buscar()
    {
        paginaAtual = 1;
        if (!string.IsNullOrEmpty(NomeMaterial))
            await CarregarMateriais(paginaAtual, NomeMaterial);
        else
            await CarregarMateriais(paginaAtual);
    }


}
