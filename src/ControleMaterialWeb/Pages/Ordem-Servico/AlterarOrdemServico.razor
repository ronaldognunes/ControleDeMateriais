@page "/alterar-ordem-servico/{Id:int}"
@using ControleMateriaisApi.Dto;
@using ControleMaterialWeb.Models;
@using ControleMaterialWeb.Services;
@using ControleMaterialWeb.Services.Interfaces;
@inject IMaterialService _serviceMaterial
@inject IPoloService servicePolo
@inject IOrdemServicoService serviceOrdem
@inject IRecursos recursos
@inject IUsuarioLocalStorage UsuarioLocalStorage
@inject DialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Oderm de Serviço</PageTitle>


<fieldset>
    <legend>Alterar de Ordem de Serviço</legend>
    <div class="card">
        <div class="card-header">
            Dados Basicos Ordem de Serviço
        </div>
        <div class="card-body">
            <EditForm Model="@ordemServico" OnValidSubmit="@AlterarOSAsync">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="row">
                    <div class="mb-3 col-md-4">
                        <label for="Logradouro" class="form-label">Logradouro</label>
                        <InputText class="form-control" @bind-Value="ordemServico.Logradouro"></InputText>
                        <ValidationMessage For="()=> ordemServico.Logradouro" />
                    </div>
                    <div class="mb-3 col-md-1">
                        <label for="Numero" class="form-label">Número</label>
                        <InputNumber class="form-control" @bind-Value="ordemServico.Numero"></InputNumber>
                        <ValidationMessage For="()=> ordemServico.Numero" />
                    </div>
                    <div class="mb-3 col-md-2">
                        <label for="Bairro" class="form-label">Bairro</label>
                        <InputText class="form-control" @bind-Value="ordemServico.Bairro"></InputText>
                        <ValidationMessage For="()=> ordemServico.Bairro" />
                    </div>
                    <div class="mb-3 col-md-3">
                        <label for="Cidade" class="form-label">Cidade</label>
                        <InputText class="form-control" @bind-Value="ordemServico.Cidade"></InputText>
                        <ValidationMessage For="()=> ordemServico.Cidade" />
                    </div>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-1">
                        <label for="Cep" class="form-label">Cep</label>
                        <InputText class="form-control" @bind-Value="ordemServico.Cep"></InputText>
                        <ValidationMessage For="()=> ordemServico.Cep" />
                    </div>
                    <div class="mb-3 col-md-4">
                        <label for="complemento" class="form-label">Complemento</label>
                        <InputText class="form-control" @bind-Value="ordemServico.Complemento"></InputText>
                        <ValidationMessage For="()=> ordemServico.Complemento" />
                    </div>
                    <div class="mb-3 col-md-2">
                        <label for="tipo-ordem" class="form-label">Tipo Ordem Seviço</label>
                        <InputSelect @bind-Value="ordemServico.TipoOrdemDeServico" class="form-select">
                            <option></option>
                            <option value="@TipoOrdemServico.Entrada">Entrada</option>
                            <option value="@TipoOrdemServico.Saida">Saida</option>
                        </InputSelect>
                        <ValidationMessage For="()=> ordemServico.TipoOrdemDeServico" />
                    </div>
                    <div class="mb-3 col-md-2">
                        <label for="Polo" class="form-label">Polo</label>
                        <InputSelect @bind-Value="ordemServico.IdPolo" class="form-select">
                            <option></option>
                            @foreach (var polo in polos)
                            {
                                <option TValue="int32" value="@polo.Id">@polo.NomePolo</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=> ordemServico.IdPolo" />
                    </div>
                    <div class="card-header">
                        Materiais da Ordem de Servico
                    </div>
                    <div class="card-body">
                        <div class="container-sm">
                            <div class="row">
                                <div class="col-1">
                                    <input type="text" class="form-control" value="@codigo" @onchange="ConsultarMaterial" placeholder="Código" name="codigo">
                                </div>
                                <div class="col-1">
                                    <button type="button" class="btn" @onclick="AbrirModal"><RadzenIcon Icon="find_in_page" /></button>
                                </div>
                                <div class="col-3">
                                    <input type="text" class="form-control" @bind="nomeMaterial" readonly="true" name="nome_material">
                                </div>
                                <div class="col-1">
                                    <input type="text" class="form-control" @bind="qtd" placeholder="UN" name="qtd">
                                </div>
                                <div class="col">
                                    <button type="button" class="btn btn-primary" @onclick="AdicionarMaterial">Adicionar material</button>
                                </div>
                            </div>
                        </div>
                        <div class="container-sm">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Código do material</th>
                                        <th>Descrição</th>
                                        <th>Unidade de Medida</th>
                                        <th>Excluir</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in ordemServico.ItensOrdemServico)
                                    {
                                        <tr>
                                            <td>@item.IdMaterial</td>
                                            <td>@item.Material.Nome</td>
                                            <td>@item.Quantidade</td>
                                            <td>
                                                <button type="button" class="btn btn-outline-danger" @onclick="(()=>ExcluirItem(item))">Excluir</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <div class="card-header"></div>
                    <div class="card-body">
                        <div class="row-g3">
                            <button type="submit" class="btn btn-primary">Salvar</button>
                            <button type="button" class="btn btn-success" @onclick="Voltar">Voltar</button>
                        </div>
                    </div>

                </div>
            </EditForm>
        </div>
    </div>



</fieldset>


@code {
    private AlteracaoOrdemServicoDto ordemServico = new();
    private string codigo = "";
    private string nomeMaterial = string.Empty;
    private string qtd = "";
    private List<PoloDto> polos = new List<PoloDto>();
    List<AlteracaoItemOrdemServicoDto> itensParaExcluir = new();
    List<ItemOrdenServicoDto> itensParaIncluir = new();
    private List<string> MensagensDeErros = new();
    [Parameter]
    public int Id { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        await CarregarPolosAsync();
        await CarregarOrdemServico(Id);
    }

    private async Task CarregarOrdemServico(int id)
    {
        var retorno = await serviceOrdem.RecuperarOrdemServicoAsync(id);
        ordemServico = retorno.Result;
    }

    private async Task AlterarOSAsync()
    {
        try
        {
            if (ordemServico.ItensOrdemServico.Count == 0)
            {
                recursos.AlertaErro("Não é possivel salvar uma Ordem de Serviço sem materiais");
                return;
            }

            var usuario = await UsuarioLocalStorage.RecuperarDadosUsuario();
            ordemServico.IdUsuario = usuario.Id;

            var itens = new List<EnviarItemOsDto>();
            var itensNovos = new List<ItemOrdenServicoDto>();

            foreach (var item in ordemServico.ItensOrdemServico)
            {
                if (item.Id is not null)
                {
                    var itemEnvio = new EnviarItemOsDto() { Id = item.Id, IdMaterial = item.IdMaterial, Quantidade = item.Quantidade, IdOs = item.IdOs };
                    itens.Add(itemEnvio);
                }
                else
                {
                    itensParaIncluir.Add(new ItemOrdenServicoDto() { IdMaterial = item.IdMaterial ?? 0, Quantidade = item.Quantidade ?? 0, IdOs = ordemServico.Id });
                }
            }

            var envio = new EnviarAlteracaoDto()
                {
                    Bairro = ordemServico.Bairro,
                    Cep = ordemServico.Cep,
                    Logradouro = ordemServico.Logradouro,
                    Numero = ordemServico.Numero,
                    Cidade = ordemServico.Cidade,
                    Id = ordemServico.Id,
                    IdPolo = ordemServico.IdPolo,
                    IdUsuario = ordemServico.IdUsuario,
                    ItensOrdemServico = itens,
                    TipoOrdemDeServico = ordemServico.TipoOrdemDeServico,
                    Complemento = ordemServico.Complemento
                };

            var retorno = await serviceOrdem.AlterarOrdemServicoAsync(envio.Id, envio);

            MensagensDeErros = retorno.MensagensDeErros;

            if (itensParaExcluir.Count > 0)
                await EnviarExclusaoDeItens();

            if (itensParaIncluir.Count > 0)
                await EnviarInclusaoDeItens();

            foreach (var mens in MensagensDeErros) recursos.AlertaErro(mens);

            if (MensagensDeErros.Count() == 0)
            {
                recursos.AlertaSucesso();
                await CarregarOrdemServico(Id);
            }

        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private void LimparCampos()
    {
        ordemServico.Bairro = "";
        ordemServico.Logradouro = "";
        ordemServico.Numero = null;
        ordemServico.Bairro = "";
        ordemServico.Cep = "";
    }

    private void AdicionarMaterial()
    {
        if (!string.IsNullOrWhiteSpace(nomeMaterial) && !string.IsNullOrWhiteSpace(qtd) && !string.IsNullOrWhiteSpace(codigo))
        {
            if (ordemServico.ItensOrdemServico.Any(x => x.IdMaterial == Convert.ToInt32(codigo)))
            {
                recursos.AlertaErro($"Já existe este o item {nomeMaterial} na ordem de serviço.");
                return;
            }
            ordemServico.ItensOrdemServico.Add(new AlteracaoItemOrdemServicoDto() { IdMaterial = Convert.ToInt32(codigo), Quantidade = Convert.ToInt32(qtd), Material = new MaterialDto() { Nome = nomeMaterial }, IdOs = ordemServico.Id });

        }
        LimparDadoConsultaMaterial();
    }

    private async Task ConsultarMaterial(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            var dados = await _serviceMaterial.RecuperarMaterialAsync(id);
            if (dados.Sucesso)
            {
                nomeMaterial = dados.Result.Nome;
                codigo = dados.Result.Id.ToString();
            }
        }
    }

    private void LimparDadoConsultaMaterial()
    {
        codigo = "";
        nomeMaterial = "";
        qtd = "";
    }

    private void ExcluirItem(AlteracaoItemOrdemServicoDto item)
    {
        ordemServico.ItensOrdemServico.Remove(item);
        if (item.Id is not null)
            itensParaExcluir.Add(item);

    }

    private async Task EnviarExclusaoDeItens()
    {
        foreach (var item in itensParaExcluir)
        {
            var retorno = await serviceOrdem.ExcluirItemOs(item.Id ?? 0);
            if (!retorno.Sucesso)
                MensagensDeErros.AddRange(retorno.MensagensDeErros);
        }
    }

    private async Task EnviarInclusaoDeItens()
    {
        var retornoCadastroNovosItens = await serviceOrdem.InserirItensOs(itensParaIncluir);
        if (!retornoCadastroNovosItens.Sucesso)
        {
            MensagensDeErros.AddRange(retornoCadastroNovosItens.MensagensDeErros);
        }
    }

    private async Task CarregarPolosAsync()
    {
        var dados = await servicePolo.RecuperarTodosMateriaisAsync("", 1000, 1);
        if (dados.Sucesso)
            polos = dados.Result?.ToList();
    }

    public async Task SelecionarMat(int id)
    {
        var dados = await _serviceMaterial.RecuperarMaterialAsync(id);
        if (dados.Sucesso)
        {
            nomeMaterial = dados.Result.Nome;
            codigo = dados.Result.Id.ToString();
        }
        DialogService.Close();
    }

    public async Task AbrirModal()
    {
        await DialogService.OpenAsync("Pesquisa Material", ds =>@<ModalMaterial Selecionar="SelecionarMat"></ModalMaterial>);
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/consulta-ordem-servico");
    }

}